// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package libwimark

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark(in *jlexer.Lexer, out *WirelessClientUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mac":
			out.MAC = string(in.String())
		case "mac_addr":
			out.MacAddr = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "Type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark(out *jwriter.Writer, in WirelessClientUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mac\":"
		out.RawString(prefix[1:])
		out.String(string(in.MAC))
	}
	{
		const prefix string = ",\"mac_addr\":"
		out.RawString(prefix)
		out.String(string(in.MacAddr))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WirelessClientUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WirelessClientUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WirelessClientUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WirelessClientUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark1(in *jlexer.Lexer, out *WirelessClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mac":
			out.MAC = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "Type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		case "manufacturer":
			out.Manufacturer = string(in.String())
		case "mac_addr":
			out.MacAddr = string(in.String())
		case "State":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.State).UnmarshalJSON(data))
			}
		case "wlan_id":
			out.WLAN = string(in.String())
		case "wlan_ssid":
			out.SSID = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "radio_id":
			out.Radio = string(in.String())
		case "freq":
			out.Freq = string(in.String())
		case "channel":
			out.Channel = string(in.String())
		case "mode":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Mode).UnmarshalJSON(data))
			}
		case "ip":
			out.Ip = string(in.String())
		case "rssi":
			out.Rssi = int(in.Int())
		case "noise":
			out.Noise = int(in.Int())
		case "snr":
			out.SNR = int(in.Int())
		case "health_score":
			out.HealthScore = int(in.Int())
		case "in_packets":
			out.InPackets = int64(in.Int64())
		case "out_packets":
			out.OutPackets = int64(in.Int64())
		case "in_kbytes":
			out.InKBytes = int64(in.Int64())
		case "out_kbytes":
			out.OutKBytes = int64(in.Int64())
		case "first_connect":
			out.FirstConnect = int64(in.Int64())
		case "last_connect":
			out.LastConnect = int64(in.Int64())
		case "last_auth":
			out.LastAuthorise = int64(in.Int64())
		case "useragent":
			out.UserAgent = string(in.String())
		case "username":
			out.UserName = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "os_version":
			out.OSVersion = string(in.String())
		case "ua_device":
			out.UADevice = string(in.String())
		case "ua_type":
			out.UAType = string(in.String())
		case "create_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark1(out *jwriter.Writer, in WirelessClient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mac\":"
		out.RawString(prefix[1:])
		out.String(string(in.MAC))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	{
		const prefix string = ",\"manufacturer\":"
		out.RawString(prefix)
		out.String(string(in.Manufacturer))
	}
	{
		const prefix string = ",\"mac_addr\":"
		out.RawString(prefix)
		out.String(string(in.MacAddr))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.Raw((in.State).MarshalJSON())
	}
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix)
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"wlan_ssid\":"
		out.RawString(prefix)
		out.String(string(in.SSID))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"radio_id\":"
		out.RawString(prefix)
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"freq\":"
		out.RawString(prefix)
		out.String(string(in.Freq))
	}
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Raw((in.Mode).MarshalJSON())
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"rssi\":"
		out.RawString(prefix)
		out.Int(int(in.Rssi))
	}
	{
		const prefix string = ",\"noise\":"
		out.RawString(prefix)
		out.Int(int(in.Noise))
	}
	{
		const prefix string = ",\"snr\":"
		out.RawString(prefix)
		out.Int(int(in.SNR))
	}
	{
		const prefix string = ",\"health_score\":"
		out.RawString(prefix)
		out.Int(int(in.HealthScore))
	}
	{
		const prefix string = ",\"in_packets\":"
		out.RawString(prefix)
		out.Int64(int64(in.InPackets))
	}
	{
		const prefix string = ",\"out_packets\":"
		out.RawString(prefix)
		out.Int64(int64(in.OutPackets))
	}
	{
		const prefix string = ",\"in_kbytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.InKBytes))
	}
	{
		const prefix string = ",\"out_kbytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.OutKBytes))
	}
	{
		const prefix string = ",\"first_connect\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstConnect))
	}
	{
		const prefix string = ",\"last_connect\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastConnect))
	}
	{
		const prefix string = ",\"last_auth\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastAuthorise))
	}
	{
		const prefix string = ",\"useragent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"os\":"
		out.RawString(prefix)
		out.String(string(in.OS))
	}
	{
		const prefix string = ",\"os_version\":"
		out.RawString(prefix)
		out.String(string(in.OSVersion))
	}
	{
		const prefix string = ",\"ua_device\":"
		out.RawString(prefix)
		out.String(string(in.UADevice))
	}
	{
		const prefix string = ",\"ua_type\":"
		out.RawString(prefix)
		out.String(string(in.UAType))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Raw((in.CreateAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WirelessClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WirelessClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WirelessClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WirelessClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark1(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark2(in *jlexer.Lexer, out *WLANStatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "wlan_id":
			out.WLAN = string(in.String())
		case "ssid":
			out.SSID = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "total_rx_bytes":
			out.TotalRxBytes = int64(in.Int64())
		case "total_tx_bytes":
			out.TotalTxBytes = int64(in.Int64())
		case "delta_tx_bytes":
			out.DeltaTxBytes = int64(in.Int64())
		case "delta_rx_bytes":
			out.DeltaRxBytes = int64(in.Int64())
		case "connected_clients":
			if in.IsNull() {
				in.Skip()
				out.ConnectedClients = nil
			} else {
				in.Delim('[')
				if out.ConnectedClients == nil {
					if !in.IsDelim(']') {
						out.ConnectedClients = make([]string, 0, 4)
					} else {
						out.ConnectedClients = []string{}
					}
				} else {
					out.ConnectedClients = (out.ConnectedClients)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ConnectedClients = append(out.ConnectedClients, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "create_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark2(out *jwriter.Writer, in WLANStatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix)
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"ssid\":"
		out.RawString(prefix)
		out.String(string(in.SSID))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"total_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalRxBytes))
	}
	{
		const prefix string = ",\"total_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalTxBytes))
	}
	{
		const prefix string = ",\"delta_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaTxBytes))
	}
	{
		const prefix string = ",\"delta_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaRxBytes))
	}
	{
		const prefix string = ",\"connected_clients\":"
		out.RawString(prefix)
		if in.ConnectedClients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ConnectedClients {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Raw((in.CreateAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WLANStatInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WLANStatInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WLANStatInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WLANStatInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark2(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark3(in *jlexer.Lexer, out *StationDumpData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "radio":
			out.Radio = string(in.String())
		case "assoclist":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AssocList = make(map[string]AccountingRadio)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 AccountingRadio
					(v4).UnmarshalEasyJSON(in)
					(out.AssocList)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark3(out *jwriter.Writer, in StationDumpData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"radio\":"
		out.RawString(prefix[1:])
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"assoclist\":"
		out.RawString(prefix)
		if in.AssocList == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.AssocList {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				(v5Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StationDumpData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StationDumpData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StationDumpData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StationDumpData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark3(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark4(in *jlexer.Lexer, out *StatEventRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "post_script":
			out.PostScript = string(in.String())
		case "notify_type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NotifyType).UnmarshalJSON(data))
			}
		case "notify_settings":
			if m, ok := out.NotifySettings.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NotifySettings.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NotifySettings = in.Interface()
			}
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark4(out *jwriter.Writer, in StatEventRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"post_script\":"
		out.RawString(prefix)
		out.String(string(in.PostScript))
	}
	{
		const prefix string = ",\"notify_type\":"
		out.RawString(prefix)
		out.Raw((in.NotifyType).MarshalJSON())
	}
	{
		const prefix string = ",\"notify_settings\":"
		out.RawString(prefix)
		if m, ok := in.NotifySettings.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NotifySettings.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NotifySettings))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatEventRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatEventRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatEventRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatEventRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark4(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark5(in *jlexer.Lexer, out *Stat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cpe_id":
			out.CPE = UUID(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "cpu":
			out.CPU = float64(in.Float64())
		case "memory":
			easyjson49ddcd6Decode(in, &out.RAM)
		case "uptime":
			out.Uptime = int64(in.Int64())
		case "storage":
			out.Storage = float64(in.Float64())
		case "processes_active":
			out.ProcActive = uint64(in.Uint64())
		case "processes_sleeping":
			out.ProcSleeping = uint64(in.Uint64())
		case "interfaces":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Interfaces = make(map[string]struct {
					Type    string  `json:"type"`
					Uptime  int64   `json:"uptime"`
					Tx      float64 `json:"tx"`
					Rx      float64 `json:"rx"`
					TxSpeed float64 `json:"tx_speed"`
					RxSpeed float64 `json:"rx_speed"`
					TxDelta float64 `json:"tx_delta"`
					RxDelta float64 `json:"rx_delta"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 struct {
						Type    string  `json:"type"`
						Uptime  int64   `json:"uptime"`
						Tx      float64 `json:"tx"`
						Rx      float64 `json:"rx"`
						TxSpeed float64 `json:"tx_speed"`
						RxSpeed float64 `json:"rx_speed"`
						TxDelta float64 `json:"tx_delta"`
						RxDelta float64 `json:"rx_delta"`
					}
					easyjson49ddcd6Decode1(in, &v6)
					(out.Interfaces)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "eth0_state":
			easyjson49ddcd6Decode2(in, &out.Eth0State)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark5(out *jwriter.Writer, in Stat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"cpu\":"
		out.RawString(prefix)
		out.Float64(float64(in.CPU))
	}
	{
		const prefix string = ",\"memory\":"
		out.RawString(prefix)
		easyjson49ddcd6Encode(out, in.RAM)
	}
	{
		const prefix string = ",\"uptime\":"
		out.RawString(prefix)
		out.Int64(int64(in.Uptime))
	}
	{
		const prefix string = ",\"storage\":"
		out.RawString(prefix)
		out.Float64(float64(in.Storage))
	}
	{
		const prefix string = ",\"processes_active\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ProcActive))
	}
	{
		const prefix string = ",\"processes_sleeping\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ProcSleeping))
	}
	{
		const prefix string = ",\"interfaces\":"
		out.RawString(prefix)
		if in.Interfaces == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Interfaces {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				easyjson49ddcd6Encode1(out, v7Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"eth0_state\":"
		out.RawString(prefix)
		easyjson49ddcd6Encode2(out, in.Eth0State)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark5(l, v)
}
func easyjson49ddcd6Decode2(in *jlexer.Lexer, out *struct {
	Carrier       int16  `json:"carrier"`
	CarrierChange int16  `json:"carrier_changes"`
	Speed         int16  `json:"speed"`
	OperState     string `json:"operstate"`
	Duplex        string `json:"duplex"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "carrier":
			out.Carrier = int16(in.Int16())
		case "carrier_changes":
			out.CarrierChange = int16(in.Int16())
		case "speed":
			out.Speed = int16(in.Int16())
		case "operstate":
			out.OperState = string(in.String())
		case "duplex":
			out.Duplex = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6Encode2(out *jwriter.Writer, in struct {
	Carrier       int16  `json:"carrier"`
	CarrierChange int16  `json:"carrier_changes"`
	Speed         int16  `json:"speed"`
	OperState     string `json:"operstate"`
	Duplex        string `json:"duplex"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"carrier\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.Carrier))
	}
	{
		const prefix string = ",\"carrier_changes\":"
		out.RawString(prefix)
		out.Int16(int16(in.CarrierChange))
	}
	{
		const prefix string = ",\"speed\":"
		out.RawString(prefix)
		out.Int16(int16(in.Speed))
	}
	{
		const prefix string = ",\"operstate\":"
		out.RawString(prefix)
		out.String(string(in.OperState))
	}
	{
		const prefix string = ",\"duplex\":"
		out.RawString(prefix)
		out.String(string(in.Duplex))
	}
	out.RawByte('}')
}
func easyjson49ddcd6Decode1(in *jlexer.Lexer, out *struct {
	Type    string  `json:"type"`
	Uptime  int64   `json:"uptime"`
	Tx      float64 `json:"tx"`
	Rx      float64 `json:"rx"`
	TxSpeed float64 `json:"tx_speed"`
	RxSpeed float64 `json:"rx_speed"`
	TxDelta float64 `json:"tx_delta"`
	RxDelta float64 `json:"rx_delta"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "uptime":
			out.Uptime = int64(in.Int64())
		case "tx":
			out.Tx = float64(in.Float64())
		case "rx":
			out.Rx = float64(in.Float64())
		case "tx_speed":
			out.TxSpeed = float64(in.Float64())
		case "rx_speed":
			out.RxSpeed = float64(in.Float64())
		case "tx_delta":
			out.TxDelta = float64(in.Float64())
		case "rx_delta":
			out.RxDelta = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6Encode1(out *jwriter.Writer, in struct {
	Type    string  `json:"type"`
	Uptime  int64   `json:"uptime"`
	Tx      float64 `json:"tx"`
	Rx      float64 `json:"rx"`
	TxSpeed float64 `json:"tx_speed"`
	RxSpeed float64 `json:"rx_speed"`
	TxDelta float64 `json:"tx_delta"`
	RxDelta float64 `json:"rx_delta"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"uptime\":"
		out.RawString(prefix)
		out.Int64(int64(in.Uptime))
	}
	{
		const prefix string = ",\"tx\":"
		out.RawString(prefix)
		out.Float64(float64(in.Tx))
	}
	{
		const prefix string = ",\"rx\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rx))
	}
	{
		const prefix string = ",\"tx_speed\":"
		out.RawString(prefix)
		out.Float64(float64(in.TxSpeed))
	}
	{
		const prefix string = ",\"rx_speed\":"
		out.RawString(prefix)
		out.Float64(float64(in.RxSpeed))
	}
	{
		const prefix string = ",\"tx_delta\":"
		out.RawString(prefix)
		out.Float64(float64(in.TxDelta))
	}
	{
		const prefix string = ",\"rx_delta\":"
		out.RawString(prefix)
		out.Float64(float64(in.RxDelta))
	}
	out.RawByte('}')
}
func easyjson49ddcd6Decode(in *jlexer.Lexer, out *struct {
	Total    float64 `json:"total"`
	Buffered float64 `json:"buffered"`
	Shared   float64 `json:"shared"`
	Free     float64 `json:"free"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = float64(in.Float64())
		case "buffered":
			out.Buffered = float64(in.Float64())
		case "shared":
			out.Shared = float64(in.Float64())
		case "free":
			out.Free = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6Encode(out *jwriter.Writer, in struct {
	Total    float64 `json:"total"`
	Buffered float64 `json:"buffered"`
	Shared   float64 `json:"shared"`
	Free     float64 `json:"free"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Total))
	}
	{
		const prefix string = ",\"buffered\":"
		out.RawString(prefix)
		out.Float64(float64(in.Buffered))
	}
	{
		const prefix string = ",\"shared\":"
		out.RawString(prefix)
		out.Float64(float64(in.Shared))
	}
	{
		const prefix string = ",\"free\":"
		out.RawString(prefix)
		out.Float64(float64(in.Free))
	}
	out.RawByte('}')
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark6(in *jlexer.Lexer, out *OtherClientData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark6(out *jwriter.Writer, in OtherClientData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherClientData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherClientData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherClientData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherClientData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark6(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark7(in *jlexer.Lexer, out *LBSZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "identity":
			out.Identity = string(in.String())
		case "group":
			out.Group = UUID(in.String())
		case "corners":
			if in.IsNull() {
				in.Skip()
				out.Corners = nil
			} else {
				in.Delim('[')
				if out.Corners == nil {
					if !in.IsDelim(']') {
						out.Corners = make([]CornerCoords, 0, 2)
					} else {
						out.Corners = []CornerCoords{}
					}
				} else {
					out.Corners = (out.Corners)[:0]
				}
				for !in.IsDelim(']') {
					var v8 CornerCoords
					(v8).UnmarshalEasyJSON(in)
					out.Corners = append(out.Corners, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark7(out *jwriter.Writer, in LBSZone) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"identity\":"
		out.RawString(prefix)
		out.String(string(in.Identity))
	}
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"corners\":"
		out.RawString(prefix)
		if in.Corners == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Corners {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LBSZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LBSZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LBSZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LBSZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark7(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark8(in *jlexer.Lexer, out *LBSClientSignal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rssi":
			out.RSSI = int(in.Int())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark8(out *jwriter.Writer, in LBSClientSignal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rssi\":"
		out.RawString(prefix[1:])
		out.Int(int(in.RSSI))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LBSClientSignal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LBSClientSignal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LBSClientSignal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LBSClientSignal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark8(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark9(in *jlexer.Lexer, out *LBSClientData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "cpe":
			out.CPE = UUID(in.String())
		case "radio":
			out.Radio = string(in.String())
		case "client_mac":
			out.ClientMac = string(in.String())
		case "rssi":
			out.RSSI = float64(in.Float64())
		case "freq":
			out.Frequency = int(in.Int())
		case "ssids":
			if in.IsNull() {
				in.Skip()
				out.SSIDs = nil
			} else {
				in.Delim('[')
				if out.SSIDs == nil {
					if !in.IsDelim(']') {
						out.SSIDs = make([]string, 0, 4)
					} else {
						out.SSIDs = []string{}
					}
				} else {
					out.SSIDs = (out.SSIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.SSIDs = append(out.SSIDs, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signals":
			if in.IsNull() {
				in.Skip()
				out.Signals = nil
			} else {
				in.Delim('[')
				if out.Signals == nil {
					if !in.IsDelim(']') {
						out.Signals = make([]LBSClientSignal, 0, 4)
					} else {
						out.Signals = []LBSClientSignal{}
					}
				} else {
					out.Signals = (out.Signals)[:0]
				}
				for !in.IsDelim(']') {
					var v12 LBSClientSignal
					(v12).UnmarshalEasyJSON(in)
					out.Signals = append(out.Signals, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark9(out *jwriter.Writer, in LBSClientData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"cpe\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"radio\":"
		out.RawString(prefix)
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"client_mac\":"
		out.RawString(prefix)
		out.String(string(in.ClientMac))
	}
	{
		const prefix string = ",\"rssi\":"
		out.RawString(prefix)
		out.Float64(float64(in.RSSI))
	}
	{
		const prefix string = ",\"freq\":"
		out.RawString(prefix)
		out.Int(int(in.Frequency))
	}
	{
		const prefix string = ",\"ssids\":"
		out.RawString(prefix)
		if in.SSIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.SSIDs {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signals\":"
		out.RawString(prefix)
		if in.Signals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Signals {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LBSClientData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LBSClientData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LBSClientData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LBSClientData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark9(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark10(in *jlexer.Lexer, out *LBSClientCoords) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "group":
			out.Group = UUID(in.String())
		case "mac":
			out.Mac = string(in.String())
		case "bestcpe":
			out.BestCPE = UUID(in.String())
		case "zone":
			out.Zone = string(in.String())
		case "expire_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpireAt).UnmarshalJSON(data))
			}
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "z":
			out.Z = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark10(out *jwriter.Writer, in LBSClientCoords) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"mac\":"
		out.RawString(prefix)
		out.String(string(in.Mac))
	}
	{
		const prefix string = ",\"bestcpe\":"
		out.RawString(prefix)
		out.String(string(in.BestCPE))
	}
	{
		const prefix string = ",\"zone\":"
		out.RawString(prefix)
		out.String(string(in.Zone))
	}
	{
		const prefix string = ",\"expire_at\":"
		out.RawString(prefix)
		out.Raw((in.ExpireAt).MarshalJSON())
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.Float64(float64(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LBSClientCoords) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LBSClientCoords) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LBSClientCoords) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LBSClientCoords) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark10(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark11(in *jlexer.Lexer, out *LBSCPEInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			out.Group = UUID(in.String())
		case "cpe":
			out.CPE = UUID(in.String())
		case "name":
			out.Name = string(in.String())
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "z":
			out.Z = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark11(out *jwriter.Writer, in LBSCPEInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"cpe\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.Float64(float64(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LBSCPEInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LBSCPEInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LBSCPEInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LBSCPEInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark11(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark12(in *jlexer.Lexer, out *CornerCoords) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = float64(in.Float64())
		case "y":
			out.Y = float64(in.Float64())
		case "z":
			out.Z = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark12(out *jwriter.Writer, in CornerCoords) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.Float64(float64(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CornerCoords) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CornerCoords) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CornerCoords) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CornerCoords) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark12(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark13(in *jlexer.Lexer, out *ClientStatOld) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Acct-Status-Type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AcctStatusType).UnmarshalJSON(data))
			}
		case "cpe_id":
			out.CPE = UUID(in.String())
		case "wlan_id":
			out.WLAN = UUID(in.String())
		case "radio_id":
			out.RadioId = string(in.String())
		case "Calling-Station-Id":
			out.CallingStationId = string(in.String())
		case "Called-Station-Id":
			out.CalledStationId = string(in.String())
		case "User-Name":
			out.UserName = string(in.String())
		case "Acct-Delay-Time":
			out.AcctDelayTime = int(in.Int())
		case "Acct-Session-Id":
			out.AcctSessionId = string(in.String())
		case "Acct-Input-Gigawords":
			if in.IsNull() {
				in.Skip()
				out.AcctInputGigawords = nil
			} else {
				if out.AcctInputGigawords == nil {
					out.AcctInputGigawords = new(int)
				}
				*out.AcctInputGigawords = int(in.Int())
			}
		case "Acct-Output-Gigawords":
			if in.IsNull() {
				in.Skip()
				out.AcctOutputGigawords = nil
			} else {
				if out.AcctOutputGigawords == nil {
					out.AcctOutputGigawords = new(int)
				}
				*out.AcctOutputGigawords = int(in.Int())
			}
		case "Acct-Output-Octets":
			if in.IsNull() {
				in.Skip()
				out.AcctOutputOctets = nil
			} else {
				if out.AcctOutputOctets == nil {
					out.AcctOutputOctets = new(int)
				}
				*out.AcctOutputOctets = int(in.Int())
			}
		case "Acct-Input-Octets":
			if in.IsNull() {
				in.Skip()
				out.AcctInputOctets = nil
			} else {
				if out.AcctInputOctets == nil {
					out.AcctInputOctets = new(int)
				}
				*out.AcctInputOctets = int(in.Int())
			}
		case "Acct-Input-Packets":
			if in.IsNull() {
				in.Skip()
				out.AcctInputPackets = nil
			} else {
				if out.AcctInputPackets == nil {
					out.AcctInputPackets = new(int)
				}
				*out.AcctInputPackets = int(in.Int())
			}
		case "Acct-Output-Packets":
			if in.IsNull() {
				in.Skip()
				out.AcctOutputPackets = nil
			} else {
				if out.AcctOutputPackets == nil {
					out.AcctOutputPackets = new(int)
				}
				*out.AcctOutputPackets = int(in.Int())
			}
		case "Acct-Session-Time":
			if in.IsNull() {
				in.Skip()
				out.AcctSessionTime = nil
			} else {
				if out.AcctSessionTime == nil {
					out.AcctSessionTime = new(int)
				}
				*out.AcctSessionTime = int(in.Int())
			}
		case "Timestamp":
			out.Timestamp = int(in.Int())
		case "Connect-Info":
			out.ConnectInfo = string(in.String())
		case "NAS-IP-Address":
			out.NasIPAddress = string(in.String())
		case "NAS-Port-Type":
			out.NasPortType = string(in.String())
		case "NAS-Port":
			out.NasPort = string(in.String())
		case "inactive":
			out.Inactive = int(in.Int())
		case "tx_ht":
			out.Tx_ht = bool(in.Bool())
		case "rx_ht":
			out.Rx_ht = bool(in.Bool())
		case "tx_rate":
			out.Tx_rate = int(in.Int())
		case "rx_rate":
			out.Rx_rate = int(in.Int())
		case "rx_vht":
			out.Rx_vht = bool(in.Bool())
		case "tx_vht":
			out.Tx_vht = bool(in.Bool())
		case "rx_mhz":
			out.Rx_mhz = int(in.Int())
		case "tx_mhz":
			out.Tx_mhz = int(in.Int())
		case "signal":
			out.Signal = int(in.Int())
		case "noise":
			out.Noise = int(in.Int())
		case "frequency":
			out.Frequency = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark13(out *jwriter.Writer, in ClientStatOld) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Acct-Status-Type\":"
		out.RawString(prefix[1:])
		out.Raw((in.AcctStatusType).MarshalJSON())
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix)
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"radio_id\":"
		out.RawString(prefix)
		out.String(string(in.RadioId))
	}
	{
		const prefix string = ",\"Calling-Station-Id\":"
		out.RawString(prefix)
		out.String(string(in.CallingStationId))
	}
	{
		const prefix string = ",\"Called-Station-Id\":"
		out.RawString(prefix)
		out.String(string(in.CalledStationId))
	}
	{
		const prefix string = ",\"User-Name\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"Acct-Delay-Time\":"
		out.RawString(prefix)
		out.Int(int(in.AcctDelayTime))
	}
	{
		const prefix string = ",\"Acct-Session-Id\":"
		out.RawString(prefix)
		out.String(string(in.AcctSessionId))
	}
	{
		const prefix string = ",\"Acct-Input-Gigawords\":"
		out.RawString(prefix)
		if in.AcctInputGigawords == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.AcctInputGigawords))
		}
	}
	{
		const prefix string = ",\"Acct-Output-Gigawords\":"
		out.RawString(prefix)
		if in.AcctOutputGigawords == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.AcctOutputGigawords))
		}
	}
	{
		const prefix string = ",\"Acct-Output-Octets\":"
		out.RawString(prefix)
		if in.AcctOutputOctets == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.AcctOutputOctets))
		}
	}
	{
		const prefix string = ",\"Acct-Input-Octets\":"
		out.RawString(prefix)
		if in.AcctInputOctets == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.AcctInputOctets))
		}
	}
	{
		const prefix string = ",\"Acct-Input-Packets\":"
		out.RawString(prefix)
		if in.AcctInputPackets == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.AcctInputPackets))
		}
	}
	{
		const prefix string = ",\"Acct-Output-Packets\":"
		out.RawString(prefix)
		if in.AcctOutputPackets == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.AcctOutputPackets))
		}
	}
	{
		const prefix string = ",\"Acct-Session-Time\":"
		out.RawString(prefix)
		if in.AcctSessionTime == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.AcctSessionTime))
		}
	}
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix)
		out.Int(int(in.Timestamp))
	}
	{
		const prefix string = ",\"Connect-Info\":"
		out.RawString(prefix)
		out.String(string(in.ConnectInfo))
	}
	{
		const prefix string = ",\"NAS-IP-Address\":"
		out.RawString(prefix)
		out.String(string(in.NasIPAddress))
	}
	{
		const prefix string = ",\"NAS-Port-Type\":"
		out.RawString(prefix)
		out.String(string(in.NasPortType))
	}
	{
		const prefix string = ",\"NAS-Port\":"
		out.RawString(prefix)
		out.String(string(in.NasPort))
	}
	{
		const prefix string = ",\"inactive\":"
		out.RawString(prefix)
		out.Int(int(in.Inactive))
	}
	{
		const prefix string = ",\"tx_ht\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tx_ht))
	}
	{
		const prefix string = ",\"rx_ht\":"
		out.RawString(prefix)
		out.Bool(bool(in.Rx_ht))
	}
	if in.Tx_rate != 0 {
		const prefix string = ",\"tx_rate\":"
		out.RawString(prefix)
		out.Int(int(in.Tx_rate))
	}
	if in.Rx_rate != 0 {
		const prefix string = ",\"rx_rate\":"
		out.RawString(prefix)
		out.Int(int(in.Rx_rate))
	}
	{
		const prefix string = ",\"rx_vht\":"
		out.RawString(prefix)
		out.Bool(bool(in.Rx_vht))
	}
	{
		const prefix string = ",\"tx_vht\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tx_vht))
	}
	if in.Rx_mhz != 0 {
		const prefix string = ",\"rx_mhz\":"
		out.RawString(prefix)
		out.Int(int(in.Rx_mhz))
	}
	if in.Tx_mhz != 0 {
		const prefix string = ",\"tx_mhz\":"
		out.RawString(prefix)
		out.Int(int(in.Tx_mhz))
	}
	if in.Signal != 0 {
		const prefix string = ",\"signal\":"
		out.RawString(prefix)
		out.Int(int(in.Signal))
	}
	if in.Noise != 0 {
		const prefix string = ",\"noise\":"
		out.RawString(prefix)
		out.Int(int(in.Noise))
	}
	if in.Frequency != 0 {
		const prefix string = ",\"frequency\":"
		out.RawString(prefix)
		out.Int(int(in.Frequency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientStatOld) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientStatOld) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientStatOld) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientStatOld) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark13(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark14(in *jlexer.Lexer, out *ClientStatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "mac":
			out.MAC = string(in.String())
		case "wlan_id":
			out.WLAN = string(in.String())
		case "ssid":
			out.SSID = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "radio":
			out.Radio = string(in.String())
		case "channel":
			out.Channel = string(in.String())
		case "freq":
			out.Frequence = string(in.String())
		case "noise":
			out.Noise = int(in.Int())
		case "rssi":
			out.RSSI = int(in.Int())
		case "mode":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Mode).UnmarshalJSON(data))
			}
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "total_rx_bytes":
			out.TotalRxBytes = int64(in.Int64())
		case "total_tx_bytes":
			out.TotalTxBytes = int64(in.Int64())
		case "delta_tx_bytes":
			out.DeltaTxBytes = int64(in.Int64())
		case "delta_rx_bytes":
			out.DeltaRxBytes = int64(in.Int64())
		case "last_rx_bytes":
			out.LastRxBytes = int64(in.Int64())
		case "last_tx_bytes":
			out.LastTxBytes = int64(in.Int64())
		case "create_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark14(out *jwriter.Writer, in ClientStatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"mac\":"
		out.RawString(prefix)
		out.String(string(in.MAC))
	}
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix)
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"ssid\":"
		out.RawString(prefix)
		out.String(string(in.SSID))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"radio\":"
		out.RawString(prefix)
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"freq\":"
		out.RawString(prefix)
		out.String(string(in.Frequence))
	}
	{
		const prefix string = ",\"noise\":"
		out.RawString(prefix)
		out.Int(int(in.Noise))
	}
	{
		const prefix string = ",\"rssi\":"
		out.RawString(prefix)
		out.Int(int(in.RSSI))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Raw((in.Mode).MarshalJSON())
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"total_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalRxBytes))
	}
	{
		const prefix string = ",\"total_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalTxBytes))
	}
	{
		const prefix string = ",\"delta_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaTxBytes))
	}
	{
		const prefix string = ",\"delta_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaRxBytes))
	}
	{
		const prefix string = ",\"last_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastRxBytes))
	}
	{
		const prefix string = ",\"last_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastTxBytes))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Raw((in.CreateAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientStatInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientStatInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientStatInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientStatInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark14(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark15(in *jlexer.Lexer, out *ClientStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "macaddr":
			out.MAC = string(in.String())
		case "ssid":
			out.SSID = string(in.String())
		case "wlan_id":
			out.WLAN = UUID(in.String())
		case "cpe_id":
			out.CPE = UUID(in.String())
		case "radio_id":
			out.RadioId = string(in.String())
		case "bssid":
			out.BSSID = string(in.String())
		case "frequency":
			out.Frequency = int(in.Int())
		case "identity":
			out.Username = string(in.String())
		case "session_id":
			out.SessionId = string(in.String())
		case "session_time":
			out.SessionTime = int(in.Int())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "accounting":
			(out.Accounting).UnmarshalEasyJSON(in)
		case "rf":
			(out.Radio).UnmarshalEasyJSON(in)
		case "dpi":
			(out.DPI).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark15(out *jwriter.Writer, in ClientStat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Raw((in.Type).MarshalJSON())
	}
	{
		const prefix string = ",\"macaddr\":"
		out.RawString(prefix)
		out.String(string(in.MAC))
	}
	{
		const prefix string = ",\"ssid\":"
		out.RawString(prefix)
		out.String(string(in.SSID))
	}
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix)
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"radio_id\":"
		out.RawString(prefix)
		out.String(string(in.RadioId))
	}
	{
		const prefix string = ",\"bssid\":"
		out.RawString(prefix)
		out.String(string(in.BSSID))
	}
	if in.Frequency != 0 {
		const prefix string = ",\"frequency\":"
		out.RawString(prefix)
		out.Int(int(in.Frequency))
	}
	{
		const prefix string = ",\"identity\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"session_id\":"
		out.RawString(prefix)
		out.String(string(in.SessionId))
	}
	{
		const prefix string = ",\"session_time\":"
		out.RawString(prefix)
		out.Int(int(in.SessionTime))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"accounting\":"
		out.RawString(prefix)
		(in.Accounting).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rf\":"
		out.RawString(prefix)
		(in.Radio).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"dpi\":"
		out.RawString(prefix)
		(in.DPI).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark15(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark16(in *jlexer.Lexer, out *ClientSessionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "mac":
			out.MAC = string(in.String())
		case "wlan_id":
			out.WLAN = string(in.String())
		case "ssid":
			out.SSID = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "radio_id":
			out.Radio = string(in.String())
		case "freq":
			out.Freq = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "stop":
			out.Stop = int64(in.Int64())
		case "duration":
			out.Duration = int64(in.Int64())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "start_noise":
			out.StartNoise = int(in.Int())
		case "stop_noise":
			out.StopNoise = int(in.Int())
		case "start_rssi":
			out.StartRSSI = int(in.Int())
		case "stop_rssi":
			out.StopRSSI = int(in.Int())
		case "rx_bytes":
			out.RxBytes = int64(in.Int64())
		case "tx_bytes":
			out.TxBytes = int64(in.Int64())
		case "useragent":
			out.UserAgent = string(in.String())
		case "username":
			out.UserName = string(in.String())
		case "authen_type":
			out.AuthenType = string(in.String())
		case "auth_type":
			out.AuthType = string(in.String())
		case "create_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateAt).UnmarshalJSON(data))
			}
		case "dpi":
			(out.DPI).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark16(out *jwriter.Writer, in ClientSessionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"mac\":"
		out.RawString(prefix)
		out.String(string(in.MAC))
	}
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix)
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"ssid\":"
		out.RawString(prefix)
		out.String(string(in.SSID))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"radio_id\":"
		out.RawString(prefix)
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"freq\":"
		out.RawString(prefix)
		out.String(string(in.Freq))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"stop\":"
		out.RawString(prefix)
		out.Int64(int64(in.Stop))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.Duration))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"start_noise\":"
		out.RawString(prefix)
		out.Int(int(in.StartNoise))
	}
	{
		const prefix string = ",\"stop_noise\":"
		out.RawString(prefix)
		out.Int(int(in.StopNoise))
	}
	{
		const prefix string = ",\"start_rssi\":"
		out.RawString(prefix)
		out.Int(int(in.StartRSSI))
	}
	{
		const prefix string = ",\"stop_rssi\":"
		out.RawString(prefix)
		out.Int(int(in.StopRSSI))
	}
	{
		const prefix string = ",\"rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.RxBytes))
	}
	{
		const prefix string = ",\"tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TxBytes))
	}
	{
		const prefix string = ",\"useragent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	if in.AuthenType != "" {
		const prefix string = ",\"authen_type\":"
		out.RawString(prefix)
		out.String(string(in.AuthenType))
	}
	if in.AuthType != "" {
		const prefix string = ",\"auth_type\":"
		out.RawString(prefix)
		out.String(string(in.AuthType))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Raw((in.CreateAt).MarshalJSON())
	}
	{
		const prefix string = ",\"dpi\":"
		out.RawString(prefix)
		(in.DPI).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientSessionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientSessionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientSessionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientSessionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark16(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark17(in *jlexer.Lexer, out *ClientProbeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "mac":
			out.MAC = string(in.String())
		case "cpe":
			out.CPE = string(in.String())
		case "cpe_name":
			out.CPEName = string(in.String())
		case "cpe_mac":
			out.CPEMAC = string(in.String())
		case "radio":
			out.Radio = string(in.String())
		case "freq":
			out.Frequency = int(in.Int())
		case "rssi":
			out.RSSI = int(in.Int())
		case "manufacturer":
			out.Manufacturer = string(in.String())
		case "assoc_data":
			(out.AssocData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark17(out *jwriter.Writer, in ClientProbeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"mac\":"
		out.RawString(prefix)
		out.String(string(in.MAC))
	}
	{
		const prefix string = ",\"cpe\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"cpe_name\":"
		out.RawString(prefix)
		out.String(string(in.CPEName))
	}
	{
		const prefix string = ",\"cpe_mac\":"
		out.RawString(prefix)
		out.String(string(in.CPEMAC))
	}
	{
		const prefix string = ",\"radio\":"
		out.RawString(prefix)
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"freq\":"
		out.RawString(prefix)
		out.Int(int(in.Frequency))
	}
	{
		const prefix string = ",\"rssi\":"
		out.RawString(prefix)
		out.Int(int(in.RSSI))
	}
	{
		const prefix string = ",\"manufacturer\":"
		out.RawString(prefix)
		out.String(string(in.Manufacturer))
	}
	if true {
		const prefix string = ",\"assoc_data\":"
		out.RawString(prefix)
		(in.AssocData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientProbeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientProbeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientProbeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientProbeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark17(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark18(in *jlexer.Lexer, out *ClientAssocData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wlan_id":
			out.WLAN = string(in.String())
		case "wlan_ssid":
			out.SSID = string(in.String())
		case "wlan_desc":
			out.Desc = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "radio_id":
			out.Radio = string(in.String())
		case "freq":
			out.Freq = string(in.String())
		case "channel":
			out.Channel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark18(out *jwriter.Writer, in ClientAssocData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"wlan_ssid\":"
		out.RawString(prefix)
		out.String(string(in.SSID))
	}
	{
		const prefix string = ",\"wlan_desc\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"radio_id\":"
		out.RawString(prefix)
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"freq\":"
		out.RawString(prefix)
		out.String(string(in.Freq))
	}
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		out.String(string(in.Channel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientAssocData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientAssocData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientAssocData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientAssocData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark18(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark19(in *jlexer.Lexer, out *CameraClientData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rtsp_stream":
			out.Rtsp_stream = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark19(out *jwriter.Writer, in CameraClientData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rtsp_stream\":"
		out.RawString(prefix[1:])
		out.String(string(in.Rtsp_stream))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CameraClientData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CameraClientData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CameraClientData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CameraClientData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark19(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark20(in *jlexer.Lexer, out *CPEStatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "cpu_load":
			out.CPULoad = float64(in.Float64())
		case "memory_free":
			out.MemoryFree = int(in.Int())
		case "memory_total":
			out.MemoryTotal = int(in.Int())
		case "total_rx_bytes":
			out.TotalRxBytes = int64(in.Int64())
		case "total_tx_bytes":
			out.TotalTxBytes = int64(in.Int64())
		case "last_rx_bytes":
			out.LastRxBytes = int64(in.Int64())
		case "last_tx_bytes":
			out.LastTxBytes = int64(in.Int64())
		case "delta_tx_bytes":
			out.DeltaTxBytes = int64(in.Int64())
		case "delta_rx_bytes":
			out.DeltaRxBytes = int64(in.Int64())
		case "tx_speed":
			out.TxSpeed = float64(in.Float64())
		case "rx_speed":
			out.RxSpeed = float64(in.Float64())
		case "uptime":
			out.Uptime = int64(in.Int64())
		case "connected_clients":
			if in.IsNull() {
				in.Skip()
				out.ConnectedClients = nil
			} else {
				in.Delim('[')
				if out.ConnectedClients == nil {
					if !in.IsDelim(']') {
						out.ConnectedClients = make([]string, 0, 4)
					} else {
						out.ConnectedClients = []string{}
					}
				} else {
					out.ConnectedClients = (out.ConnectedClients)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.ConnectedClients = append(out.ConnectedClients, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark20(out *jwriter.Writer, in CPEStatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"cpu_load\":"
		out.RawString(prefix)
		out.Float64(float64(in.CPULoad))
	}
	{
		const prefix string = ",\"memory_free\":"
		out.RawString(prefix)
		out.Int(int(in.MemoryFree))
	}
	{
		const prefix string = ",\"memory_total\":"
		out.RawString(prefix)
		out.Int(int(in.MemoryTotal))
	}
	{
		const prefix string = ",\"total_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalRxBytes))
	}
	{
		const prefix string = ",\"total_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalTxBytes))
	}
	{
		const prefix string = ",\"last_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastRxBytes))
	}
	{
		const prefix string = ",\"last_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastTxBytes))
	}
	{
		const prefix string = ",\"delta_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaTxBytes))
	}
	{
		const prefix string = ",\"delta_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaRxBytes))
	}
	{
		const prefix string = ",\"tx_speed\":"
		out.RawString(prefix)
		out.Float64(float64(in.TxSpeed))
	}
	{
		const prefix string = ",\"rx_speed\":"
		out.RawString(prefix)
		out.Float64(float64(in.RxSpeed))
	}
	{
		const prefix string = ",\"uptime\":"
		out.RawString(prefix)
		out.Int64(int64(in.Uptime))
	}
	{
		const prefix string = ",\"connected_clients\":"
		out.RawString(prefix)
		if in.ConnectedClients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.ConnectedClients {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CPEStatInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CPEStatInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CPEStatInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CPEStatInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark20(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark21(in *jlexer.Lexer, out *CPESessionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "stop":
			out.Stop = int64(in.Int64())
		case "duration":
			out.Duration = int64(in.Int64())
		case "create_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark21(out *jwriter.Writer, in CPESessionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"stop\":"
		out.RawString(prefix)
		out.Int64(int64(in.Stop))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.Duration))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Raw((in.CreateAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CPESessionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CPESessionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CPESessionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CPESessionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark21(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark22(in *jlexer.Lexer, out *CPEPollSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]UUID, 0, 4)
					} else {
						out.Rules = []UUID{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v20 UUID
					v20 = UUID(in.String())
					out.Rules = append(out.Rules, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark22(out *jwriter.Writer, in CPEPollSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rules\":"
		out.RawString(prefix[1:])
		if in.Rules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Rules {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CPEPollSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CPEPollSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CPEPollSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CPEPollSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark22(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark23(in *jlexer.Lexer, out *BSSStatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "wlan_id":
			out.WLAN = string(in.String())
		case "ssid":
			out.SSID = string(in.String())
		case "cpe_id":
			out.CPE = string(in.String())
		case "radio":
			out.Radio = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "total_rx_bytes":
			out.TotalRxBytes = int64(in.Int64())
		case "total_tx_bytes":
			out.TotalTxBytes = int64(in.Int64())
		case "delta_tx_bytes":
			out.DeltaTxBytes = int64(in.Int64())
		case "delta_rx_bytes":
			out.DeltaRxBytes = int64(in.Int64())
		case "connected_clients":
			if in.IsNull() {
				in.Skip()
				out.ConnectedClients = nil
			} else {
				in.Delim('[')
				if out.ConnectedClients == nil {
					if !in.IsDelim(']') {
						out.ConnectedClients = make([]string, 0, 4)
					} else {
						out.ConnectedClients = []string{}
					}
				} else {
					out.ConnectedClients = (out.ConnectedClients)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.ConnectedClients = append(out.ConnectedClients, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "create_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark23(out *jwriter.Writer, in BSSStatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"wlan_id\":"
		out.RawString(prefix)
		out.String(string(in.WLAN))
	}
	{
		const prefix string = ",\"ssid\":"
		out.RawString(prefix)
		out.String(string(in.SSID))
	}
	{
		const prefix string = ",\"cpe_id\":"
		out.RawString(prefix)
		out.String(string(in.CPE))
	}
	{
		const prefix string = ",\"radio\":"
		out.RawString(prefix)
		out.String(string(in.Radio))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"total_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalRxBytes))
	}
	{
		const prefix string = ",\"total_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalTxBytes))
	}
	{
		const prefix string = ",\"delta_tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaTxBytes))
	}
	{
		const prefix string = ",\"delta_rx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeltaRxBytes))
	}
	{
		const prefix string = ",\"connected_clients\":"
		out.RawString(prefix)
		if in.ConnectedClients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.ConnectedClients {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Raw((in.CreateAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BSSStatInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BSSStatInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BSSStatInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BSSStatInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark23(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark24(in *jlexer.Lexer, out *AccountingRadio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "signal":
			out.Signal = int(in.Int())
		case "noise":
			out.Noise = int(in.Int())
		case "inactive":
			out.Inactive = int(in.Int())
		case "rx_mhz":
			out.RxMhz = int(in.Int())
		case "tx_mhz":
			out.TxMhz = int(in.Int())
		case "tx_rate":
			out.TxRate = int(in.Int())
		case "rx_rate":
			out.RxRate = int(in.Int())
		case "tx_ht":
			out.TxHt = bool(in.Bool())
		case "rx_ht":
			out.RxHt = bool(in.Bool())
		case "rx_vht":
			out.RxVht = bool(in.Bool())
		case "tx_vht":
			out.TxVht = bool(in.Bool())
		case "tx_mcs":
			out.TxMcs = int(in.Int())
		case "rx_mcs":
			out.RxMcs = int(in.Int())
		case "tx_nss":
			out.TxNSS = int(in.Int())
		case "rx_nss":
			out.RxNSS = int(in.Int())
		case "tx_40mhz":
			out.Tx40Mhz = bool(in.Bool())
		case "rx_40mhz":
			out.Rx40Mhz = bool(in.Bool())
		case "tx_short_gi":
			out.TxShortGi = bool(in.Bool())
		case "rx_short_gi":
			out.RxShortGi = bool(in.Bool())
		case "expected_throughput":
			out.ExpThroughput = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark24(out *jwriter.Writer, in AccountingRadio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"signal\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Signal))
	}
	{
		const prefix string = ",\"noise\":"
		out.RawString(prefix)
		out.Int(int(in.Noise))
	}
	{
		const prefix string = ",\"inactive\":"
		out.RawString(prefix)
		out.Int(int(in.Inactive))
	}
	{
		const prefix string = ",\"rx_mhz\":"
		out.RawString(prefix)
		out.Int(int(in.RxMhz))
	}
	{
		const prefix string = ",\"tx_mhz\":"
		out.RawString(prefix)
		out.Int(int(in.TxMhz))
	}
	{
		const prefix string = ",\"tx_rate\":"
		out.RawString(prefix)
		out.Int(int(in.TxRate))
	}
	{
		const prefix string = ",\"rx_rate\":"
		out.RawString(prefix)
		out.Int(int(in.RxRate))
	}
	{
		const prefix string = ",\"tx_ht\":"
		out.RawString(prefix)
		out.Bool(bool(in.TxHt))
	}
	{
		const prefix string = ",\"rx_ht\":"
		out.RawString(prefix)
		out.Bool(bool(in.RxHt))
	}
	{
		const prefix string = ",\"rx_vht\":"
		out.RawString(prefix)
		out.Bool(bool(in.RxVht))
	}
	{
		const prefix string = ",\"tx_vht\":"
		out.RawString(prefix)
		out.Bool(bool(in.TxVht))
	}
	{
		const prefix string = ",\"tx_mcs\":"
		out.RawString(prefix)
		out.Int(int(in.TxMcs))
	}
	{
		const prefix string = ",\"rx_mcs\":"
		out.RawString(prefix)
		out.Int(int(in.RxMcs))
	}
	{
		const prefix string = ",\"tx_nss\":"
		out.RawString(prefix)
		out.Int(int(in.TxNSS))
	}
	{
		const prefix string = ",\"rx_nss\":"
		out.RawString(prefix)
		out.Int(int(in.RxNSS))
	}
	{
		const prefix string = ",\"tx_40mhz\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tx40Mhz))
	}
	{
		const prefix string = ",\"rx_40mhz\":"
		out.RawString(prefix)
		out.Bool(bool(in.Rx40Mhz))
	}
	{
		const prefix string = ",\"tx_short_gi\":"
		out.RawString(prefix)
		out.Bool(bool(in.TxShortGi))
	}
	{
		const prefix string = ",\"rx_short_gi\":"
		out.RawString(prefix)
		out.Bool(bool(in.RxShortGi))
	}
	{
		const prefix string = ",\"expected_throughput\":"
		out.RawString(prefix)
		out.Int(int(in.ExpThroughput))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountingRadio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountingRadio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountingRadio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountingRadio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark24(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark25(in *jlexer.Lexer, out *AccountingData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rx_bytes":
			out.RxBytes = int64(in.Int64())
		case "tx_bytes":
			out.TxBytes = int64(in.Int64())
		case "rx_packets":
			out.RxPackets = int64(in.Int64())
		case "tx_packets":
			out.TxPackets = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark25(out *jwriter.Writer, in AccountingData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rx_bytes\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.RxBytes))
	}
	{
		const prefix string = ",\"tx_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.TxBytes))
	}
	{
		const prefix string = ",\"rx_packets\":"
		out.RawString(prefix)
		out.Int64(int64(in.RxPackets))
	}
	{
		const prefix string = ",\"tx_packets\":"
		out.RawString(prefix)
		out.Int64(int64(in.TxPackets))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountingData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountingData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountingData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountingData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark25(l, v)
}
func easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark26(in *jlexer.Lexer, out *AccountingDPI) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dest_ips":
			if in.IsNull() {
				in.Skip()
				out.DestIPs = nil
			} else {
				in.Delim('[')
				if out.DestIPs == nil {
					if !in.IsDelim(']') {
						out.DestIPs = make([]string, 0, 4)
					} else {
						out.DestIPs = []string{}
					}
				} else {
					out.DestIPs = (out.DestIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.DestIPs = append(out.DestIPs, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark26(out *jwriter.Writer, in AccountingDPI) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dest_ips\":"
		out.RawString(prefix[1:])
		if in.DestIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.DestIPs {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountingDPI) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountingDPI) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeBitbucketOrgWimarksystemsLibwimark26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountingDPI) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountingDPI) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeBitbucketOrgWimarksystemsLibwimark26(l, v)
}
